name: Deploy Essaypig

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DS_API_URL: ${{ secrets.DS_API_URL }}
      DS_API_KEY: ${{ secrets.DS_API_KEY }}
      DS_MODEL: ${{ secrets.DS_MODEL }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      NODE_ENV: ${{ secrets.NODE_ENV }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }} <<'EOF'
            set -e  # Exit on any error
            
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            nvm install 18
            nvm use 18

            # Set Node.js memory limits to prevent OOM
            export NODE_OPTIONS="--max-old-space-size=2048"

            corepack enable
            corepack prepare yarn@4.9.2 --activate

            cd /var/www/essaypig

            echo "Creating frontend .env"
            echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}" > .env
            echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" >> .env
            echo "VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}" >> .env
            echo "VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" >> .env
            echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
            echo "VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}" >> .env

            echo "Creating backend .env"
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > server/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> server/.env
            echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> server/.env
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> server/.env
            echo "DS_API_URL=${{ secrets.DS_API_URL }}" >> server/.env
            echo "DS_API_KEY=${{ secrets.DS_API_KEY }}" >> server/.env
            echo "DS_MODEL=${{ secrets.DS_MODEL }}" >> server/.env
            echo "RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}" >> server/.env
            echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> server/.env
            echo "FIREBASE_SERVICE_ACCOUNT_KEY=${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" >> server/.env

            echo "Pulling latest code..."
            git stash || true
            git pull origin main
            git stash pop || true

            echo "Installing PM2 globally..."
            npm install -g pm2

            echo "Building frontend..."
            yarn install --network-timeout 100000
            yarn build

            echo "Building server..."
            cd server
            yarn install --network-timeout 100000
            yarn build
            
            echo "Starting server with PM2..."
            pm2 restart essaypig-server || pm2 start dist/index.js --name essaypig-server
            
            cd ..

            echo "Cleaning up frontend .env file (keeping server .env for runtime)"
            rm -f .env
            
            echo "Deployment completed successfully!"
          EOF
